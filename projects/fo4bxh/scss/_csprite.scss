// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arr-next-name: 'arr-next';
$arr-next-x: 0px;
$arr-next-y: 106px;
$arr-next-offset-x: 0px;
$arr-next-offset-y: -106px;
$arr-next-width: 50px;
$arr-next-height: 112px;
$arr-next-total-width: 317px;
$arr-next-total-height: 218px;
$arr-next-image: '../gsres/csprite.png';
$arr-next: (0px, 106px, 0px, -106px, 50px, 112px, 317px, 218px, '../gsres/csprite.png', 'arr-next', );
$arr-prev-name: 'arr-prev';
$arr-prev-x: 58px;
$arr-prev-y: 106px;
$arr-prev-offset-x: -58px;
$arr-prev-offset-y: -106px;
$arr-prev-width: 50px;
$arr-prev-height: 112px;
$arr-prev-total-width: 317px;
$arr-prev-total-height: 218px;
$arr-prev-image: '../gsres/csprite.png';
$arr-prev: (58px, 106px, -58px, -106px, 50px, 112px, 317px, 218px, '../gsres/csprite.png', 'arr-prev', );
$close-name: 'close';
$close-x: 250px;
$close-y: 63px;
$close-offset-x: -250px;
$close-offset-y: -63px;
$close-width: 35px;
$close-height: 35px;
$close-total-width: 317px;
$close-total-height: 218px;
$close-image: '../gsres/csprite.png';
$close: (250px, 63px, -250px, -63px, 35px, 35px, 317px, 218px, '../gsres/csprite.png', 'close', );
$logo-gf-name: 'logo-gf';
$logo-gf-x: 0px;
$logo-gf-y: 0px;
$logo-gf-offset-x: 0px;
$logo-gf-offset-y: 0px;
$logo-gf-width: 242px;
$logo-gf-height: 45px;
$logo-gf-total-width: 317px;
$logo-gf-total-height: 218px;
$logo-gf-image: '../gsres/csprite.png';
$logo-gf: (0px, 0px, 0px, 0px, 242px, 45px, 317px, 218px, '../gsres/csprite.png', 'logo-gf', );
$logo-gs-name: 'logo-gs';
$logo-gs-x: 0px;
$logo-gs-y: 53px;
$logo-gs-offset-x: 0px;
$logo-gs-offset-y: -53px;
$logo-gs-width: 139px;
$logo-gs-height: 45px;
$logo-gs-total-width: 317px;
$logo-gs-total-height: 218px;
$logo-gs-image: '../gsres/csprite.png';
$logo-gs: (0px, 53px, 0px, -53px, 139px, 45px, 317px, 218px, '../gsres/csprite.png', 'logo-gs', );
$s1-play-h-name: 's1-play-h';
$s1-play-h-x: 116px;
$s1-play-h-y: 106px;
$s1-play-h-offset-x: -116px;
$s1-play-h-offset-y: -106px;
$s1-play-h-width: 67px;
$s1-play-h-height: 55px;
$s1-play-h-total-width: 317px;
$s1-play-h-total-height: 218px;
$s1-play-h-image: '../gsres/csprite.png';
$s1-play-h: (116px, 106px, -116px, -106px, 67px, 55px, 317px, 218px, '../gsres/csprite.png', 's1-play-h', );
$s1-play-name: 's1-play';
$s1-play-x: 250px;
$s1-play-y: 0px;
$s1-play-offset-x: -250px;
$s1-play-offset-y: 0px;
$s1-play-width: 67px;
$s1-play-height: 55px;
$s1-play-total-width: 317px;
$s1-play-total-height: 218px;
$s1-play-image: '../gsres/csprite.png';
$s1-play: (250px, 0px, -250px, 0px, 67px, 55px, 317px, 218px, '../gsres/csprite.png', 's1-play', );
$spritesheet-width: 317px;
$spritesheet-height: 218px;
$spritesheet-image: '../gsres/csprite.png';
$spritesheet-sprites: ($arr-next, $arr-prev, $close, $logo-gf, $logo-gs, $s1-play-h, $s1-play, );
$spritesheet: (317px, 218px, '../gsres/csprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
